
//EJERCICIO NUMERO UNO---------------------------------------------------

#include <QCoreApplication>
#include <iostream>
#include <fstream>
using namespace std;


class A{
   private:
    int serial;
    std::string denominacion;

    public:

    A(){};
    A(int serial, string denominacion):serial(serial), denominacion(denominacion){}
    void set_serial(int ser){
        serial = ser;
    }
    void set_denominacion(string den){
        denominacion=den;
    }
     int get_serial(){
         return serial;
     }
     string get_denominacion(){
         return denominacion;
     }
};

class ListadeObjetos{
private:
    vector <A> vector;
public:

    //constructor
    ListadeObjetos(){};

    void agregarObjeto(A objeto){
        if(vector.size()<5){
            vector.push_back(objeto);
            cout<<"Objeto agregado satisfactoriamente!\n\n";
        }
        else{
            cout<<"Arreglo lleno!\n\n";
        }
    }

    void retirarObjeto(){
        if(!vector.empty()){
            vector.pop_back();
            cout<<"Objeto retirado!\n\n";
        }
        else{
            cout<<"Arreglo vacio!\n\n";
        }
    }

    //Crea un objeto de tipo A y lo agrega a la ListadeObjetos
    void nuevoObjetoLista(int serial, string denominacion){
        A* objeto= new A(serial, denominacion);
        agregarObjeto(*objeto);

    }

    void mostrarObjeto(){
        A objeto;
        if(vector.empty()){
            cout<<"Arreglo vacio!"<<endl;
            return;
        }
        cout<<"Desplegando informacion de todos los objetos\n";
        for(int i=0; i<vector.size(); i++){
            objeto=vector.at(i);
            cout<<"Serial: "<<objeto.get_serial()<<endl;
            cout<<"Denominacion: "<<objeto.get_denominacion()<<"\n\n";

        }
    }

    /*x es una posición del vector. Las posiciones deben ser ingresadas iniciando desde 1 y no desde 0
     * de esta forma la primera posicion del vector corresponde a x=1*/
    void mostrarObjeto(int x){
        if(x<=vector.size()){
            A objeto=vector.at(x-1);
            cout<<"Objeto "<<x<<":"<<endl;
            cout<<"Serial: "<<objeto.get_serial()<<endl;
            cout<<"Denominacion: "<<objeto.get_denominacion()<<"\n\n"
                                                               "";
        }
        else{
            cout<<"El arreglo no tiene algun elemento en esta posicion!\n\n";
        }


    }

};
int main(){
    int opt=0;
    int seri;
    string denom;
    ListadeObjetos* lista= new ListadeObjetos();

    while(opt!=4){
        cout<<"------------------------------------------------"<<endl;
        cout<<"seleccione una opcion"<<endl;
        cout<<"1. Agregar objeto a la lista."<<endl;
        cout<<"2. Retirar objeto de la lista."<<endl;
        cout<<"3. Mostrar Objeto."<<endl;
        cout<<"4. Salir\n";
        cin>>opt;

        switch (opt) {
        case 1:
            cout<<"Ingrese el serial del objeto a ingresar: ";
            cin>>seri;
            cout<<"Ingrese la denominacion del objeto: ";
            cin>>denom;
            lista->nuevoObjetoLista(seri, denom);
            break;
        case 2:
            lista->retirarObjeto();
            break;
        case 3:
            int pos;
            cout<<"Si desea ver la informacion de un objeto en una posicion en particular, ingrese el numero de la posicion,\n "
                  "de lo contrario ingrese '0' para ver todos los elementos: ";
            cin>>pos;
            if(pos!=0){
                lista->mostrarObjeto(pos);
            }
            else{
                lista->mostrarObjeto();
            }
            break;
        default:
            break;
        }

    }

}

-----------------------------------------------------------------------------------------------------------------
EJERCICIO NUMERO DOS

//los ejercicios son similares con el de otros dos compañeros debido a que nos reunimos por medio de zoom 
//para poderlos realizar debido a la complejidad de dichos ejercicios

#include <iostream>
#include<stdlib.h>
using namespace std;

class cita{
  string nombre1, nombre2, lugar;
  public:
  cita(string, string, string);
  void mostar_cita();
};

cita::cita(string _nombre1, string _nombre2, string _lugar ){
    nombre1=_nombre1;
    nombre2=_nombre2;
    lugar=_lugar;

}

class fecha{
  private:
  int dia, mes, anio, hora;
  public:
  fecha(int, int, int, int);

  void mostrarFecha();
};

fecha::fecha(int _dia, int _mes,int _anio, int _hora){
  anio = _anio;
  mes = _mes;
  dia = _dia;
  hora = _hora;
}

void fecha::mostrarFecha(){
    if (dia<=0 or  dia>31){
        cout<<"dia no esta en el rango establecido"<<endl;
    }

    if (mes<=0 or mes>12){
        cout<<"mes no esta en el rango establecido"<<endl;
    }
    if (hora>2400){
        cout<<"hora no esta en el rango establecido"<<endl;
    }
    if (mes==2 && dia>29){
        cout<<"mes de febrero no tiene mas de 29 dias"<<endl;
    }
    else {
        cout<<" la fecha de la cita es:"<<dia<<"/"<<mes<<"/"<<anio<<"/"<<"Hora:"<<hora<<endl;
    }
}

void cita::mostar_cita(){
  cout<<" los citados son:"<<nombre1<<" y "<<nombre2<<"  en "<<lugar<<endl;
}
int main(){
  fecha hoy(31,2,2020,600);
  hoy.mostrarFecha();

  cita dia1("esteven","carlos", "medellin");
  dia1.mostar_cita();
  return 0;
}
